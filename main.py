import os
import logging
import asyncio
import random
import uuid
from typing import Dict, List, Set
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    InlineQuery,
    InlineQueryResultArticle,
    InputTextMessageContent
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder

# ===== –ù–ê–°–¢–†–û–ô–ö–ò =====
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_IDS = set(map(int, os.getenv('ADMIN_IDS', '').split(','))) if os.getenv('ADMIN_IDS') else set()

# ===== –°–û–°–¢–û–Ø–ù–ò–Ø FSM =====
class ContestStates(StatesGroup):
    waiting_for_conditions = State()
    waiting_for_subscription = State()
    waiting_for_channels = State()
    waiting_for_winner_count = State()
    waiting_for_target_channel = State()
    waiting_for_winners = State()
    waiting_for_results_link = State()

# ===== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï =====
contests: Dict[str, Dict] = {}
participants: Dict[str, List[Dict]] = {}
results_links: Dict[str, str] = {}
unique_users: Set[int] = set()

# ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====
def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

def generate_contest_id(is_fast: bool = False) -> str:
    while True:
        contest_id = f"F{random.randint(100000, 999999)}" if is_fast else str(random.randint(100000, 999999))
        if contest_id not in contests:
            return contest_id

def get_statistics() -> str:
    total_contests = len(contests)
    total_participants = sum(len(participants.get(cid, [])) for cid in contests)
    total_users = len(unique_users)
    return (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n"
        f"–í—Å–µ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–æ–≤: {total_contests}\n"
        f"–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_participants}\n"
        f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}"
    )

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î =====
@dp.message(CommandStart())
async def cmd_start(message: Message):
    user_id = message.from_user.id
    kb = InlineKeyboardBuilder()
    
    kb.button(text="üéâ –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω–∫—É—Ä—Å", callback_data="new_contest")
    
    active_contests = [cid for cid, c in contests.items() 
                      if c['is_active'] and c['creator_id'] == user_id]
    if active_contests:
        kb.button(text="üèÜ –ü–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏", callback_data="pick_winners")
    
    finished_contests = [cid for cid, c in contests.items() 
                        if not c['is_active'] and c['creator_id'] == user_id]
    if finished_contests:
        kb.button(text="üîÑ –†–µ—Ä–æ–ª –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π", callback_data="reroll_winners")
    
    if is_admin(user_id):
        kb.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
    
    kb.adjust(1)
    
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–æ–≤ –≤ Telegram.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb.as_markup()
    )

@dp.callback_query(lambda c: c.data == "new_contest")
async def new_contest(call: CallbackQuery, state: FSMContext):
    if call.message.chat.type != "private":
        await call.message.answer("‚ùå –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∫–æ–Ω–∫—É—Ä—Å—ã –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º")
        return

    await call.message.answer(
        "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ–Ω–∫—É—Ä—Å–∞ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "¬´–ö–æ–Ω–∫—É—Ä—Å –Ω–∞ –ª—É—á—à–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π! –ü—Ä–∏–∑ - 1000 —Ä—É–±–ª–µ–π. "
        "–ö–æ–Ω–∫—É—Ä—Å –ø—Ä–æ–¥–ª–∏—Ç—Å—è –¥–æ 31 –¥–µ–∫–∞–±—Ä—è.¬ª"
    )
    await state.set_state(ContestStates.waiting_for_conditions)
    await call.message.delete()

@dp.message(ContestStates.waiting_for_conditions)
async def conditions_received(message: Message, state: FSMContext):
    await state.update_data(conditions=message.text)
    await message.answer(
        "üìã –£–∫–∞–∂–∏—Ç–µ —É—Å–ª–æ–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ @channel1 –∏ @channel2, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å)"
    )
    await state.set_state(ContestStates.waiting_for_subscription)

@dp.message(ContestStates.waiting_for_subscription)
async def subscription_received(message: Message, state: FSMContext):
    await state.update_data(subscription_conditions=message.text)
    await message.answer("üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ username –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (@channel1, @channel2)")
    await state.set_state(ContestStates.waiting_for_channels)

@dp.message(ContestStates.waiting_for_channels)
async def channels_received(message: Message, state: FSMContext):
    channels = [ch.strip().replace('@', '') for ch in message.text.split(',') if ch.strip()]
    if not channels:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    await state.update_data(channels=channels)
    await message.answer("üî¢ –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:")
    await state.set_state(ContestStates.waiting_for_winner_count)

@dp.message(ContestStates.waiting_for_winner_count)
async def winners_received(message: Message, state: FSMContext):
    try:
        count = int(message.text)
        if count <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    data = await state.get_data()
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm:{count}")
    kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
    kb.adjust(1)

    await message.answer(
        f"üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—É—Ä—Å–∞:\n\n"
        f"üìå –¢–µ–∫—Å—Ç: {data['conditions']}\n"
        f"üìã –£—Å–ª–æ–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {data['subscription_conditions']}\n"
        f"üì¢ –ö–∞–Ω–∞–ª—ã: {', '.join(f'@{ch}' for ch in data['channels'])}\n"
        f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {count}",
        reply_markup=kb.as_markup()
    )
    await state.update_data(winner_count=count)

@dp.callback_query(lambda c: c.data.startswith("confirm"))
async def confirm_callback(call: CallbackQuery, state: FSMContext):
    await call.message.edit_reply_markup()
    await call.message.answer(
        "üì¢ –£–∫–∞–∂–∏—Ç–µ username –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä @my_channel)"
    )
    await state.set_state(ContestStates.waiting_for_target_channel)

@dp.callback_query(lambda c: c.data == "cancel")
async def cancel_callback(call: CallbackQuery, state: FSMContext):
    await call.message.edit_reply_markup()
    await call.message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()

@dp.message(ContestStates.waiting_for_target_channel)
async def publish_contest(message: Message, state: FSMContext):
    user_id = message.from_user.id
    target = message.text.replace("@", "").strip()
    data = await state.get_data()

    try:
        chat = await bot.get_chat(f"@{target}")
        member = await bot.get_chat_member(chat.id, user_id)
        if member.status not in ["administrator", "creator"]:
            await message.answer(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞\n"
                "‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É - @icaacull"
            )
            return

        contest_id = generate_contest_id(is_fast=False)
        text = (
            f"üéâ –ö–û–ù–ö–£–†–° üéâ\n\n"
            f"–£—Å–ª–æ–≤–∏—è: {data['conditions']}\n\n"
            f"–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞: {', '.join(f'@{ch}' for ch in data['channels'])}\n\n"
            f"–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {data['winner_count']}"
        )

        btn = InlineKeyboardButton(text="üéÅ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data=f"join:{contest_id}")
        msg = await bot.send_message(chat.id, text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[[btn]]))

        contests[contest_id] = {
            **data,
            'channel_id': chat.id,
            'message_id': msg.message_id,
            'creator_id': user_id,
            'is_active': True,
            'is_fast': False
        }
        participants[contest_id] = []

        # Notify admins about the new regular contest
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(
                    admin_id,
                    f"üÜï –ù–æ–≤—ã–π –∫–æ–Ω–∫—É—Ä—Å —Å–æ–∑–¥–∞–Ω (ID: {contest_id})\n"
                    f"–ö–∞–Ω–∞–ª: @{target}\n"
                    f"–£—Å–ª–æ–≤–∏—è: {data['conditions']}\n"
                    f"–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞: {', '.join(f'@{ch}' for ch in data['channels'])}\n"
                    f"–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {data['winner_count']}"
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")

        await message.answer(
            f"‚úÖ –ö–æ–Ω–∫—É—Ä—Å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ @{target}!\n"
            f"ID –∫–æ–Ω–∫—É—Ä—Å–∞: {contest_id}\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: @giveawaygasbot {contest_id} –≤ inline-—Ä–µ–∂–∏–º–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω–∫—É—Ä—Å—É."
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ publish_contest: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
    finally:
        await state.clear()

@dp.callback_query(lambda c: c.data.startswith("join"))
async def join_contest(call: CallbackQuery):
    user = call.from_user
    contest_id = call.data.split(":")[1]
    contest = contests.get(contest_id)

    if not contest or not contest['is_active']:
        await bot.answer_callback_query(call.id, "‚ö†Ô∏è –ö–æ–Ω–∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∑–∞–≤–µ—Ä—à—ë–Ω", show_alert=True)
        return

    unique_users.add(user.id)

    if any(p['user_id'] == user.id for p in participants.get(contest_id, [])):
        await bot.answer_callback_query(call.id, "–¢—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—à—å!", show_alert=True)
        return

    not_subbed = []
    if contest.get('is_fast', False):
        try:
            chat = await bot.get_chat(contest['channel_id'])
            member = await bot.get_chat_member(contest['channel_id'], user.id)
            if member.status not in ["member", "administrator", "creator"]:
                not_subbed.append(chat.username or f"channel_{contest['channel_id']}")
        except Exception:
            not_subbed.append(chat.username or f"channel_{contest['channel_id']}")
    else:
        for ch in contest.get('channels', []):
            try:
                chat = await bot.get_chat(f"@{ch}")
                member = await bot.get_chat_member(chat.id, user.id)
                if member.status not in ["member", "administrator", "creator"]:
                    not_subbed.append(ch)
            except Exception:
                not_subbed.append(ch)

    if not_subbed:
        alert_text = "–ü—Ä–æ–≤–µ—Ä—å –ø–æ–¥–ø–∏—Å–∫—É!\n" + "\n".join(f"–¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ @{ch}" for ch in not_subbed)
        await bot.answer_callback_query(call.id, alert_text, show_alert=True)
        return

    participants.setdefault(contest_id, []).append({
        'user_id': user.id,
        'username': user.username if user.username else None,
        'name': user.full_name
    })

    await bot.answer_callback_query(call.id, "–¢—ã —É—Å–ø–µ—à–Ω–æ —É—á–∞—Å—Ç–≤—É–µ—à—å!", show_alert=True)

@dp.callback_query(lambda c: c.data == "stats")
async def show_stats(call: CallbackQuery):
    if not is_admin(call.from_user.id):
        await call.message.answer("‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
        return
    await call.message.answer(get_statistics())
    await call.message.delete()

@dp.callback_query(lambda c: c.data == "pick_winners")
async def pick_winners(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    if call.message.chat.type != "private":
        await call.message.answer("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.")
        return

    active_contests = [(cid, c) for cid, c in contests.items() 
                      if c['is_active'] and c['creator_id'] == user_id]
    
    if not active_contests:
        await call.message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≤–∞–º–∏.")
        await call.message.delete()
        return

    kb = InlineKeyboardBuilder()
    for contest_id, contest in active_contests:
        try:
            chat = await bot.get_chat(contest['channel_id'])
            kb.button(text=f"{'–§–ê–°–¢ –ö–æ–Ω–∫—É—Ä—Å' if contest.get('is_fast', False) else '–ö–æ–Ω–∫—É—Ä—Å'} –≤ @{chat.username} (ID: {contest_id})", callback_data=f"pick:{contest_id}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–∞ –≤ pick_winners: {e}")
    kb.button(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_pick")
    kb.adjust(1)

    await call.message.answer("üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—É—Ä—Å –¥–ª—è –ø–æ–¥–≤–µ–¥–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤:", reply_markup=kb.as_markup())
    await call.message.delete()

@dp.callback_query(lambda c: c.data == "reroll_winners")
async def reroll_winners(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    if call.message.chat.type != "private":
        await call.message.answer("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.")
        return

    finished_contests = [(cid, c) for cid, c in contests.items() 
                        if not c['is_active'] and c['creator_id'] == user_id]
    
    if not finished_contests:
        await call.message.answer("‚ùå –ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≤–∞–º–∏.")
        await call.message.delete()
        return

    kb = InlineKeyboardBuilder()
    for contest_id, contest in finished_contests:
        try:
            chat = await bot.get_chat(contest['channel_id'])
            kb.button(text=f"{'–§–ê–°–¢ –ö–æ–Ω–∫—É—Ä—Å' if contest.get('is_fast', False) else '–ö–æ–Ω–∫—É—Ä—Å'} –≤ @{chat.username} (ID: {contest_id})", callback_data=f"reroll:{contest_id}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–∞ –≤ reroll_winners: {e}")
    kb.button(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_reroll")
    kb.adjust(1)

    await call.message.answer("üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—É—Ä—Å –¥–ª—è –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:", reply_markup=kb.as_markup())
    await call.message.delete()

@dp.callback_query(lambda c: c.data.startswith("pick:") or c.data.startswith("reroll:"))
async def select_contest_for_winners(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    contest_id = call.data.split(":")[1]
    contest = contests.get(contest_id)

    if not contest:
        await call.message.answer("‚ùå –ö–æ–Ω–∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await call.message.edit_reply_markup()
        return

    if contest['creator_id'] != user_id:
        await call.message.answer("‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —ç—Ç–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞.")
        await call.message.edit_reply_markup()
        return

    users = participants.get(contest_id, [])
    if not users:
        await call.message.answer("üò¢ –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π.")
        await call.message.edit_reply_markup()
        return

    try:
        if is_admin(user_id):
            text = "üìã –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–Ω–∫—É—Ä—Å–∞ (–¥–ª—è —Å–ø—Ä–∞–≤–∫–∏):\n\n" + (
                "\n".join(
                    f"{i+1}. @{u['username']} ({u['user_id']})" if u['username'] 
                    else f"{i+1}. {u['name']} ({u['user_id']})"
                    for i, u in enumerate(users)
                ) if users else "üò¢ –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
            )
            await call.message.answer(
                f"{text}\n\n"
                f"üî¢ –£–∫–∞–∂–∏—Ç–µ Telegram usernames –∏–ª–∏ IDs –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: @username1, @username2 –∏–ª–∏ 123456789, 987654321):"
            )
            await state.update_data(contest_id=contest_id, is_reroll=call.data.startswith("reroll:"))
            await state.set_state(ContestStates.waiting_for_winners)
        else:
            await call.message.answer(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞\n"
                "‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É - @icaacull"
            )
            await call.message.edit_reply_markup()
            return
        await call.message.edit_reply_markup()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ select_contest_for_winners: {e}")
        await call.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {e}")
        await call.message.edit_reply_markup()

@dp.message(ContestStates.waiting_for_winners)
async def winners_selected(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞\n"
            "‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É - @icaacull"
        )
        await state.clear()
        return

    data = await state.get_data()
    contest_id = data['contest_id']
    contest = contests.get(contest_id)

    if not contest:
        await message.answer("‚ùå –ö–æ–Ω–∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    if contest['creator_id'] != user_id:
        await message.answer("‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —ç—Ç–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞.")
        await state.clear()
        return

    try:
        winner_inputs = [i.strip() for i in message.text.split(',') if i.strip()]
        count = min(contest['winner_count'], len(winner_inputs))
        if len(winner_inputs) != count:
            await message.answer(f"‚ùå –£–∫–∞–∂–∏—Ç–µ —Ä–æ–≤–Ω–æ {count} –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π.")
            return

        winners = []
        for input_id in winner_inputs:
            user_id_input = input_id.replace('@', '') if input_id.startswith('@') else input_id
            try:
                user_id_input = int(user_id_input)
                try:
                    user = await bot.get_chat(user_id_input)
                    winners.append({
                        'user_id': user_id_input,
                        'username': user.username if user.username else None,
                        'name': user.full_name
                    })
                except:
                    winners.append({
                        'user_id': user_id_input,
                        'username': None,
                        'name': f"User {user_id_input}"
                    })
            except ValueError:
                winners.append({
                    'user_id': None,
                    'username': user_id_input,
                    'name': user_id_input
                })

        winners_text = "üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –∫–æ–Ω–∫—É—Ä—Å–∞: " + ", ".join(
            f"@{w['username']}" if w['username'] else w['name']
            for w in winners
        )

        await message.answer(
            f"üìã –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏:\n\n{winners_text}\n\n"
            f"üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã' (–∏–ª–∏ '–Ω–µ—Ç', –µ—Å–ª–∏ —Å—Å—ã–ª–∫–∏ –Ω–µ—Ç):"
        )
        await state.update_data(winners_text=winners_text, winners=winners)
        await state.set_state(ContestStates.waiting_for_results_link)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ winners_selected: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}. –£–∫–∞–∂–∏—Ç–µ usernames –∏–ª–∏ IDs —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")
        return

@dp.message(ContestStates.waiting_for_results_link)
async def publish_results(message: Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    contest_id = data['contest_id']
    contest = contests.get(contest_id)

    if not contest:
        await message.answer("‚ùå –ö–æ–Ω–∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    if contest['creator_id'] != user_id:
        await message.answer("‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —ç—Ç–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞.")
        await state.clear()
        return

    if not is_admin(user_id):
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞\n"
            "‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É - @icaacull"
        )
        await state.clear()
        return

    results_link = message.text.strip() if message.text.lower() != '–Ω–µ—Ç' else None
    if results_link and not (results_link.startswith("http://") or results_link.startswith("https://")):
        await message.answer("‚ùå –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
        return

    try:
        winners_text = data['winners_text']
        if contest.get('is_fast', False):
            updated_text = f"{contest['conditions']}\n\n{winners_text}"
        else:
            updated_text = (
                f"üéâ –ö–û–ù–ö–£–†–° üéâ\n\n"
                f"–£—Å–ª–æ–≤–∏—è: {contest['conditions']}\n\n"
                f"–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞: {', '.join(f'@{ch}' for ch in contest['channels'])}\n\n"
                f"–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {contest['winner_count']}\n\n"
                f"{winners_text}"
            )

        kb = InlineKeyboardBuilder()
        if results_link:
            results_links[contest_id] = results_link
            kb.button(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", url=results_link)
        kb.adjust(1)

        await bot.edit_message_text(
            chat_id=contest['channel_id'],
            message_id=contest['message_id'],
            text=updated_text,
            reply_markup=kb.as_markup() if results_link else None
        )

        contests[contest_id]['is_active'] = False
        await message.answer("‚úÖ –ò—Ç–æ–≥–∏ –∫–æ–Ω–∫—É—Ä—Å–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –ø–æ—Å—Ç–µ!")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ publish_results: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏—Ç–æ–≥–æ–≤: {e}")
    finally:
        await state.clear()

@dp.callback_query(lambda c: c.data == "cancel_pick")
async def cancel_pick_callback(call: CallbackQuery, state: FSMContext):
    await call.message.edit_reply_markup()
    await call.message.answer("‚ùå –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()

@dp.callback_query(lambda c: c.data == "cancel_reroll")
async def cancel_reroll_callback(call: CallbackQuery, state: FSMContext):
    await call.message.edit_reply_markup()
    await call.message.answer("‚ùå –ü–µ—Ä–µ—Å–º–æ—Ç—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –æ—Ç–º–µ–Ω–µ–Ω.")
    await state.clear()

@dp.inline_query()
async def inline_query_handler(query: InlineQuery):
    query_text = query.query.strip()
    user_id = query.from_user.id

    if query_text.startswith("conc "):
        try:
            parts = query_text[5:].split()
            if len(parts) < 3:
                await query.answer(
                    results=[
                        InlineQueryResultArticle(
                            id=str(uuid.uuid4()),
                            title="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç",
                            input_message_content=InputTextMessageContent(
                                message_text="‚ùå –£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –≤—Ä–µ–º—è –∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –∫–∞–Ω–∞–ª.\n–ü—Ä–∏–º–µ—Ä: @giveawaygasbot conc –¢–µ—Å—Ç 3 5 @MyChannel"
                            ),
                            description="–§–æ—Ä–º–∞—Ç: <–æ–ø–∏—Å–∞–Ω–∏–µ> <—É—á–∞—Å—Ç–Ω–∏–∫–∏> <–º–∏–Ω—É—Ç—ã> [@–∫–∞–Ω–∞–ª]"
                        )
                    ],
                    cache_time=1
                )
                return

            potential_numbers = [p for p in reversed(parts) if not p.startswith('@')]
            if len(potential_numbers) < 2:
                await query.answer(
                    results=[
                        InlineQueryResultArticle(
                            id=str(uuid.uuid4()),
                            title="–û—à–∏–±–∫–∞",
                            input_message_content=InputTextMessageContent(
                                message_text="‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –≤—Ä–µ–º—è (—á–∏—Å–ª–∞) –ø–µ—Ä–µ–¥ –∫–∞–Ω–∞–ª–æ–º, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω."
                            ),
                            description="–§–æ—Ä–º–∞—Ç: <–æ–ø–∏—Å–∞–Ω–∏–µ> <—É—á–∞—Å—Ç–Ω–∏–∫–∏> <–º–∏–Ω—É—Ç—ã> [@–∫–∞–Ω–∞–ª]"
                        )
                    ],
                    cache_time=1
                )
                return

            minutes = int(potential_numbers[0])
            winner_count = int(potential_numbers[1])
            if winner_count <= 0 or minutes <= 0:
                raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª—å—à–µ 0")

            description_parts = [p for p in parts if not p.startswith('@') and not p.isdigit()]
            description = " ".join(description_parts)

            target_channel = next((p.replace('@', '').strip() for p in parts if p.startswith('@')), None)

            if not target_channel:
                await query.answer(
                    results=[
                        InlineQueryResultArticle(
                            id=str(uuid.uuid4()),
                            title="–û—à–∏–±–∫–∞",
                            input_message_content=InputTextMessageContent(
                                message_text="‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–∞–Ω–∞–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä @MyChannel)."
                            ),
                            description="–§–æ—Ä–º–∞—Ç: <–æ–ø–∏—Å–∞–Ω–∏–µ> <—É—á–∞—Å—Ç–Ω–∏–∫–∏> <–º–∏–Ω—É—Ç—ã> [@–∫–∞–Ω–∞–ª]"
                        )
                    ],
                    cache_time=1
                )
                return

            try:
                chat = await bot.get_chat(f"@{target_channel}")
                member = await bot.get_chat_member(chat.id, user_id)
                if member.status not in ["administrator", "creator"]:
                    await query.answer(
                        results=[
                            InlineQueryResultArticle(
                                id=str(uuid.uuid4()),
                                title="–û—à–∏–±–∫–∞",
                                input_message_content=InputTextMessageContent(
                                    message_text=
                                    "‚ö†Ô∏è –û—à–∏–±–∫–∞\n"
                                    "‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞\n"
                                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É - @icaacull"
                                ),
                                description="–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–Ω–∫—É—Ä—Å—ã."
                            )
                        ],
                        cache_time=1
                    )
                    return

                # –ü—É–±–ª–∏–∫—É–µ–º –∫–æ–Ω–∫—É—Ä—Å —Å—Ä–∞–∑—É
                contest_id = generate_contest_id(is_fast=True)
                text = (
                    f"üéâ –§–ê–°–¢ –ö–û–ù–ö–£–†–° üéâ\n\n"
                    f"–£—Å–ª–æ–≤–∏—è: {description}\n\n"
                    f"–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞: @{target_channel}\n\n"
                    f"–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {winner_count}\n\n"
                    f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {minutes} –º–∏–Ω—É—Ç"
                )

                btn = InlineKeyboardButton(text="üéÅ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data=f"join:{contest_id}")
                msg = await bot.send_message(chat.id, text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[[btn]]))

                contests[contest_id] = {
                    'conditions': text,
                    'winner_count': winner_count,
                    'channel_id': chat.id,
                    'message_id': msg.message_id,
                    'creator_id': user_id,
                    'is_active': True,
                    'is_fast': True,
                    'duration_minutes': minutes,
                    'channels': [target_channel]
                }
                participants[contest_id] = []

                # Notify admins about the new fast contest
                for admin_id in ADMIN_IDS:
                    try:
                        await bot.send_message(
                            admin_id,
                            f"üÜï –ù–æ–≤—ã–π –§–ê–°–¢ –∫–æ–Ω–∫—É—Ä—Å —Å–æ–∑–¥–∞–Ω (ID: {contest_id})\n"
                            f"–ö–∞–Ω–∞–ª: @{target_channel}\n"
                            f"–£—Å–ª–æ–≤–∏—è: {description}\n"
                            f"–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞: @{target_channel}\n"
                            f"–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {winner_count}\n"
                            f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {minutes} –º–∏–Ω—É—Ç"
                        )
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")

                # Notify creator in private messages
                await bot.send_message(
                    user_id,
                    f"‚úÖ –§–ê–°–¢ –ö–æ–Ω–∫—É—Ä—Å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ @{target_channel}!\nID: {contest_id}\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: @giveawaygasbot {contest_id} –≤ inline-—Ä–µ–∂–∏–º–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω–∫—É—Ä—Å—É."
                )

                # Show preview in inline query results
                kb = InlineKeyboardBuilder()
                kb.button(text="üéÅ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data=f"join:{contest_id}")
                kb.adjust(1)

                await query.answer(
                    results=[
                        InlineQueryResultArticle(
                            id=str(uuid.uuid4()),
                            title=f"–§–ê–°–¢ –ö–æ–Ω–∫—É—Ä—Å –≤ @{target_channel} (ID: {contest_id})",
                            input_message_content=InputTextMessageContent(
                                message_text=text
                            ),
                            description=description[:100] + ("..." if len(description) > 100 else ""),
                            reply_markup=kb.as_markup()
                        )
                    ],
                    cache_time=1
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –§–ê–°–¢ –∫–æ–Ω–∫—É—Ä—Å–∞: {e}")
                await query.answer(
                    results=[
                        InlineQueryResultArticle(
                            id=str(uuid.uuid4()),
                            title="–û—à–∏–±–∫–∞",
                            input_message_content=InputTextMessageContent(
                                message_text=f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω–∫—É—Ä—Å —á–µ—Ä–µ–∑ /start."
                            ),
                            description="–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–∞–Ω–∞–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω."
                        )
                    ],
                    cache_time=1
                )
                return
        except ValueError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –§–ê–°–¢ –∫–æ–Ω–∫—É—Ä—Å–∞: {e}")
            await query.answer(
                results=[
                    InlineQueryResultArticle(
                        id=str(uuid.uuid4()),
                        title="–û—à–∏–±–∫–∞",
                        input_message_content=InputTextMessageContent(
                            message_text=f"‚ùå {e}\n–§–æ—Ä–º–∞—Ç: @giveawaygasbot conc <–æ–ø–∏—Å–∞–Ω–∏–µ> <—É—á–∞—Å—Ç–Ω–∏–∫–∏> <–º–∏–Ω—É—Ç—ã> [@–∫–∞–Ω–∞–ª]"
                        ),
                        description="–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞."
                    )
                ],
                cache_time=1
            )
        return
    elif query_text.lower() == "concu":
        await query.answer(
            results=[
                InlineQueryResultArticle(
                    id=str(uuid.uuid4()),
                    title="–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞",
                    input_message_content=InputTextMessageContent(
                        message_text="‚ùå –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É @giveawaygasbot conc <–æ–ø–∏—Å–∞–Ω–∏–µ> <—É—á–∞—Å—Ç–Ω–∏–∫–∏> <–º–∏–Ω—É—Ç—ã> [@–∫–∞–Ω–∞–ª]\n–ü—Ä–∏–º–µ—Ä: @giveawaygasbot conc –¢–µ—Å—Ç 3 5 @MyChannel"
                    ),
                    description="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'conc' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –§–ê–°–¢ –∫–æ–Ω–∫—É—Ä—Å–∞."
                )
            ],
            cache_time=1
        )
        return

    contest_id = query_text
    if not contest_id:
        await query.answer(
            results=[
                InlineQueryResultArticle(
                    id=str(uuid.uuid4()),
                    title="–í–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π ID –∫–æ–Ω–∫—É—Ä—Å–∞",
                    input_message_content=InputTextMessageContent(
                        message_text="–í–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π ID –∫–æ–Ω–∫—É—Ä—Å–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: @giveawaygasbot 123456\n–ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –§–ê–°–¢ –∫–æ–Ω–∫—É—Ä—Å: @giveawaygasbot conc <–æ–ø–∏—Å–∞–Ω–∏–µ> <—É—á–∞—Å—Ç–Ω–∏–∫–∏> <–º–∏–Ω—É—Ç—ã> [@–∫–∞–Ω–∞–ª]"
                    ),
                    description="–£–∫–∞–∂–∏—Ç–µ ID –∫–æ–Ω–∫—É—Ä—Å–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'conc' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞."
                )
            ],
            cache_time=1
        )
        return

    if not (contest_id.isdigit() or (contest_id.startswith('F') and contest_id[1:].isdigit())) or len(contest_id) != (7 if contest_id.startswith('F') else 6):
        await query.answer(
            results=[
                InlineQueryResultArticle(
                    id=str(uuid.uuid4()),
                    title="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ ID",
                    input_message_content=InputTextMessageContent(
                        message_text="‚ùå –í–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π ID –∫–æ–Ω–∫—É—Ä—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: @giveawaygasbot 123456) –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ @giveawaygasbot conc <–æ–ø–∏—Å–∞–Ω–∏–µ> <—É—á–∞—Å—Ç–Ω–∏–∫–∏> <–º–∏–Ω—É—Ç—ã> [@–∫–∞–Ω–∞–ª]\n–ü—Ä–∏–º–µ—Ä: @giveawaygasbot conc –¢–µ—Å—Ç 3 5 @MyChannel"
                    ),
                    description="–ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'conc' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞."
                )
            ],
            cache_time=1
        )
        return

    contest = contests.get(contest_id)
    if not contest:
        await query.answer(
            results=[
                InlineQueryResultArticle(
                    id=str(uuid.uuid4()),
                    title="–ö–æ–Ω–∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    input_message_content=InputTextMessageContent(
                        message_text=f"‚ùå –ö–æ–Ω–∫—É—Ä—Å —Å ID {contest_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.\n–ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –§–ê–°–¢ –∫–æ–Ω–∫—É—Ä—Å: @giveawaygasbot conc <–æ–ø–∏—Å–∞–Ω–∏–µ> <—É—á–∞—Å—Ç–Ω–∏–∫–∏> <–º–∏–Ω—É—Ç—ã> [@–∫–∞–Ω–∞–ª]"
                    ),
                    description="–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID –∫–æ–Ω–∫—É—Ä—Å–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∫–æ–Ω–∫—É—Ä—Å."
                )
            ],
            cache_time=1
        )
        return

    try:
        chat = await bot.get_chat(contest['channel_id'])
        text = contest['conditions']
        kb = InlineKeyboardBuilder()
        if contest['is_active']:
            kb.button(text="üéÅ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data=f"join:{contest_id}")
        kb.adjust(1)

        await query.answer(
            results=[
                InlineQueryResultArticle(
                    id=str(uuid.uuid4()),
                    title=f"{'–§–ê–°–¢ –ö–æ–Ω–∫—É—Ä—Å' if contest.get('is_fast', False) else '–ö–æ–Ω–∫—É—Ä—Å'} –≤ @{chat.username} (ID: {contest_id})",
                    input_message_content=InputTextMessageContent(
                        message_text=text
                    ),
                    description=contest['conditions'][:100] + ("..." if len(contest['conditions']) > 100 else ""),
                    reply_markup=kb.as_markup() if contest['is_active'] else None
                )
            ],
            cache_time=1
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ inline_query_handler: {e}")
        await query.answer(
            results=[
                InlineQueryResultArticle(
                    id=str(uuid.uuid4()),
                    title="–û—à–∏–±–∫–∞",
                    input_message_content=InputTextMessageContent(
                        message_text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω–∫—É—Ä—Å–∞: {e}\n–ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –§–ê–°–¢ –∫–æ–Ω–∫—É—Ä—Å: @giveawaygasbot conc <–æ–ø–∏—Å–∞–Ω–∏–µ> <—É—á–∞—Å—Ç–Ω–∏–∫–∏> <–º–∏–Ω—É—Ç—ã> [@–∫–∞–Ω–∞–ª]"
                    ),
                    description="–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∫–æ–Ω–∫—É—Ä—Å."
                )
            ],
            cache_time=1
        )

async def handle(request):
    return web.Response(text="Bot is running")

async def start_server():
    app = web.Application()
    app.router.add_get('/', handle)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', 8080)
    await site.start()
    logging.info("HTTP server started on port 8080")

# ===== –ó–ê–ü–£–°–ö –ë–û–¢–ê =====
async def main():
    await asyncio.gather(
        dp.start_polling(bot),
        start_server()
    )

if __name__ == "__main__":
    try:
        logging.info("Starting bot...")
        asyncio.run(main())
    except Exception as e:
        logging.error(f"Bot crashed: {e}")
    finally:
        logging.info("Bot stopped")
